//=== Подключение файлов ===

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
// import reportWebVitals from './reportWebVitals'; //библиотека, которая изменяет как быстро работает наше приложение


// // const elem = <h2>Hello world!</h2>; //JSX - создаем переменную с элементом html - заголовок второго порядка с текстом
// const elem = React.createElement('h2', { classNAme: 'greetings' }, 'Hello world!'); //JS - создаем переменную с элементом html
// // 1й - аргумент - название тега
// // 2й аргумент - название класса (если его нет то null передаем)
// // 3й аргумент - содержимое элемента

const text = 'hello World!';
const elem = ( //если внутри тега многострочная структура, то надо оборачивать в круглые скобки
  <div>
    <h2 className="main">Текст: {text}</h2>
    <h2>Текст: {2 + 2}</h2>
    <h2>Текст: {['23233', 6]}</h2>
    <input type="text" name="one" />
    <label htmlFor="one"></label>
    <button>Click</button>
  </div>
);
//===**  когда создается многострочный элемент, всегда должен быть у него один корневой родитель!! **===
//===** В фигурные скобки можно помещать любой вид информации: переменные, функции, выражения и т.д. !!КРОМЕ объектов  **===
//===** Все потому что фигурные скобки переводят информацию внутри в текстовый формат  **===
//===** Можно использовать все доступные в html аттрибуты помня о двух правилах  **===
//===** 1. Пишутся в формате CamelCase => tabIndex  **===
//===** 2. Есть аттрибуты, которые не совпадают по написанию с написанием в html (className вместо class и htmlFor вместо for)  **===


ReactDOM.render( // эта структура reactDOM.render вызывается только один раз(но бывают исключения)
  // <React.StrictMode>
  //   <App />
  // </React.StrictMode>, // 1й аргумент - что мы помещаем на страницу
  elem, //добавляем элемент в наше приложение
  document.getElementById('root') // 2й аргумент - во что мы помещаем
);